/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Blend mode of the object.
 */
export type BlendMode =
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22
  | 23
  | 24
  | 25
  | 26
  | 27
  | 28
  | 29;
/**
 * Encode normalised scalar values, for example RGB color components.
 */
export type UnitInterval = number;
/**
 * Enumeration of the fill types.
 */
export type FillType = 0 | 1 | 2;
/**
 * Enumeration of border positions.
 */
export type BorderPosition = 0 | 1 | 2;
/**
 * An array holds two elements, The first term is x, the second term is y.
 *
 * @minItems 2
 * @maxItems 2
 */
export type Point = [number, number];
/**
 * Encode normalised scalar values, for example RGB color components.
 */
export type UnitInterval1 = number;
/**
 * Encode normalised scalar values, for example RGB color components.
 */
export type UnitInterval2 = number;
/**
 * The six values make up a transformation matrix. When a gradient is first applied to an object, these values are the identity matrix. If the user transforms the object, the user transformation matrix is concatenated to the gradient instanceâ€™s matrix.
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix = [number, number, number, number, number, number];
/**
 * Encode normalised scalar values, for example RGB color components.
 */
export type UnitInterval3 = number;
/**
 * Its parameters are six floating point values, which describe the overall matrix applied to the gradient.
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix1 = [number, number, number, number, number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix2 = [number, number, number, number, number, number];
/**
 * Enumeration of pattern fill types.
 */
export type PatternFillType = 0 | 1 | 2 | 3 | 4 | 5;
/**
 * An array holds two elements, The first term is x, the second term is y.
 *
 * @minItems 2
 * @maxItems 2
 */
export type Point1 = [number, number];
/**
 * An array holds two elements, The first term is x, the second term is y.
 *
 * @minItems 2
 * @maxItems 2
 */
export type Point2 = [number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix3 = [number, number, number, number, number, number];
/**
 * Enumeration of the line cap styles.
 */
export type LineCapStyle = 0 | 1 | 2;
/**
 * Enumeration of the line join styles.
 */
export type LineJoinStyle = 0 | 1 | 2;
/**
 * Enumeration of the various blur types.
 */
export type BlurType = 0 | 1 | 2 | 3;
/**
 * An array holds two elements, The first term is x, the second term is y.
 *
 * @minItems 2
 * @maxItems 2
 */
export type Point3 = [number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix4 = [number, number, number, number, number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix5 = [number, number, number, number, number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix6 = [number, number, number, number, number, number];
/**
 * An array holds two elements, The first term is x, the second term is y.
 *
 * @minItems 2
 * @maxItems 2
 */
export type Point4 = [number, number];
/**
 * An array holds two elements, The first term is x, the second term is y.
 *
 * @minItems 2
 * @maxItems 2
 */
export type Point5 = [number, number];
/**
 * An array holds two elements, The first term is x, the second term is y.
 *
 * @minItems 2
 * @maxItems 2
 */
export type Point6 = [number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix7 = [number, number, number, number, number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix8 = [number, number, number, number, number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix9 = [number, number, number, number, number, number];
/**
 * Defines the valid string patterns for an override name.
 */
export type OverrideName = string | string | string | string | string;
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix10 = [number, number, number, number, number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix11 = [number, number, number, number, number, number];
/**
 * a b c d tx ty
 *
 * @minItems 6
 * @maxItems 6
 */
export type Matrix12 = [number, number, number, number, number, number];

/**
 * vgg format is a JSON-based format for describing the content of various design pieces.
 */
export interface VggFormat {
  /**
   * Specifies the file type.
   */
  fileType: 0 | 1 | 2 | 3 | 4;
  /**
   * Specifies the path to the input design file. The encoding format is utf-8.
   */
  fileName: string;
  artboard: Artboard[];
  patternLayerDef?: PatternLayerDef[];
  symbolMaster?: SymbolMaster[];
}
/**
 * Artboard is the top-level object organization container.
 */
export interface Artboard {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings;
  style: Style;
  bounds: Rect;
  frame: Rect1;
  matrix: Matrix4;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  class: "artboard";
  layers: Layer[];
  /**
   * A flag indicating whether backgroundColor should be applied as a background color of the object.
   */
  hasBackgroundColor: boolean;
  backgroundColor?: Color;
}
/**
 * This property of path itself is meaningless, and is represented by its style, such as stroke, fill, etc.
 */
export interface GraphicsContextSettings {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * Defines a border style
 */
export interface Border {
  class: "border";
  isEnabled: boolean;
  color?: Color;
  fillType: FillType;
  position: BorderPosition;
  /**
   * Thickness of the border. A line width of 0 is acceptable, this is interpreted as the thinnest line width that can be rendered at device resolution.
   */
  thickness: number;
  contextSettings: GraphicsContextSettings1;
  gradient?: Gradient;
  pattern?: Pattern;
  /**
   * Type of the border style, the dashed style is further specified in dashedOffset and dashedPattern.
   */
  style: 0 | 1 | 2;
  /**
   * A set of alternating dashes (filled regions) and gaps (empty regions). (applies to 'dashed' borders)
   */
  dashedPattern: number[];
  dashedOffset: number;
  lineCapStyle: LineCapStyle;
  lineJoinStyle: LineJoinStyle;
  miterLimit: number;
  flat: number;
}
/**
 * Defines a RGBA color value.
 */
export interface Color {
  class: "color";
  alpha: UnitInterval;
  red: UnitInterval;
  green: UnitInterval;
  blue: UnitInterval;
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings1 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Defines a gradient.
 */
export interface Gradient {
  class: "gradient";
  /**
   * The current gradient instance.
   */
  instance: GradientAngular | GradientLinear | GradientRadial | GradientBasic;
}
/**
 * Described parameters required by gradient angular.
 */
export interface GradientAngular {
  class: "gradientAngular";
  from: Point;
  to: Point;
  /**
   * @minItems 1
   */
  stops: [GradientStop, ...GradientStop[]];
  /**
   * Flag describing if gradient has been inverted.
   */
  invert: boolean;
  /**
   * Describes the Angle of the starting position. Value of rotation in degrees.
   */
  rotation: number;
}
/**
 * Defines a position on a gradient that marks the end of a transition to a new color.
 */
export interface GradientStop {
  class: "gradientStop";
  color: Color;
  position: UnitInterval1;
  midPoint: UnitInterval2;
}
/**
 * Described parameters required by gradient linear.
 */
export interface GradientLinear {
  class: "gradientLinear";
  from: Point;
  to: Point;
  /**
   * @minItems 1
   */
  stops: [GradientStop, ...GradientStop[]];
  /**
   * Flag describing if gradient has been inverted.
   */
  invert: boolean;
}
/**
 * Described parameters required by gradient radial.
 */
export interface GradientRadial {
  class: "gradientRadial";
  from: Point;
  to: Point;
  /**
   * @minItems 1
   */
  stops: [GradientStop, ...GradientStop[]];
  /**
   * Flag describing if gradient has been inverted.
   */
  invert: boolean;
  /**
   * For elliptic gradients describes ratio of major to minor semi-axis of the ellipse.
   */
  elipseLength: number;
}
/**
 * Describes the parameters of gradients in a more basic form.
 */
export interface GradientBasic {
  class: "gradientBasic";
  gradientType: 0 | 1;
  /**
   * @minItems 2
   */
  stops: [GradientStop, GradientStop, ...GradientStop[]];
  /**
   * Flag describing if gradient has been inverted.
   */
  invert: boolean;
  geometry: GradientBasicGeometry;
  hilight?: GradientHilight;
  overallMatrix?: Matrix1;
  perpendicularMatrix?: {
    flag: 0 | 1;
    matrix: Matrix2;
  }[];
}
/**
 * The meaning of the gradient vector is different for radial gradients than for linear gradients. The vector origin is the center of the circle containing the radial gradient; the vector length is the radius of the that circle. The vector angle is not used by radial blends, but is preserved and used if the user changes the gradient from radial to linear.
 */
export interface GradientBasicGeometry {
  class: "gradientBasicGeometry";
  /**
   * This argument defines how the gradient will be rendered.For simple filled paths, flag takes the value 1.
   */
  flag: 0 | 1 | 2;
  /**
   * xOrigin and yOrigin give the origin of the gradient in page coordinates. The origin can be located anywhere on the artwork, and corresponds to 0 on the gradient ramp.
   */
  xOrigin: number;
  /**
   * Refer to xOriginal for details.
   */
  yOrigin: number;
  /**
   * This argument specifies the direction of the gradient vector, in degrees. The gradient ramp extends from the origin at the value of angle, which is measured counterclockwise from the x axis.
   */
  angle: number;
  /**
   * This argument specifies the distance over which the gradient ramp is applied. The ramp will be scaled so that its 100% value is the end of the length. This parameter may be greater than 1.
   */
  length: number;
  matrix: Matrix;
  /**
   * 0.5 Indicates that the width is half the length. 2 Indicates that the width is twice the length. and so on.
   */
  widthRatio: number;
}
/**
 * Only exists in radial mode.
 */
export interface GradientHilight {
  class: "gradientHilight";
  /**
   * xHilight and yHilight specify the hilight placement, in x and y offsets from the gradient vector origin.
   */
  xHilight: number;
  /**
   * Refer to xHilight for details.
   */
  yHilight: number;
  /**
   * This argument is the angle (in degrees) to the hilight point, measured counterclockwise from the x axis.
   */
  angle: number;
  length: UnitInterval3;
}
/**
 * Pattern descriptor.
 */
export interface Pattern {
  class: "pattern";
  instance: PatternImage | PatternLayer;
}
/**
 * Use an image as the content of pattern.
 */
export interface PatternImage {
  class: "pattern_image";
  fillType: PatternFillType;
  /**
   * Whether to mirror the image.
   */
  imageTileMirrored: boolean;
  /**
   * Image scale value in tile mode.
   */
  imageTileScale: number;
  /**
   * image filename.
   */
  imageFileName: string;
}
/**
 * Use an layer as the content of pattern.
 */
export interface PatternLayer {
  class: "pattern_layer";
  /**
   * The name(utf-8) of the referenced pattern layer. Note that this is the name of the pattern layer, not its id. The pattern layer name is unique.
   */
  refLayerName: string;
  offset: Point1;
  scale: Point2;
  /**
   * Specifies the angle in counterclockwise degrees to rotate the pattern.
   */
  angle: number;
  /**
   * Flag indicating whether to apply a reflection to the pattern.
   */
  reflection: boolean;
  /**
   * Specifies the angle of the line from the origin about which the pattern is reflected. Used if the reflection operand is true.
   */
  r: number;
  /**
   * Specifies the shear angle.
   */
  shear: number;
  /**
   * Specifies the shear axis.
   */
  shearAxis: number;
  matrix: Matrix3;
}
/**
 * Defines a fill style.
 */
export interface Fill {
  class: "fill";
  isEnabled: boolean;
  color?: Color;
  fillType: FillType;
  contextSettings: GraphicsContextSettings1;
  gradient?: Gradient;
  pattern?: Pattern;
}
/**
 * Defines a blur style.
 */
export interface Blur {
  class: "blur";
  type: BlurType;
  isEnabled: boolean;
  /**
   * Blur radius.
   */
  radius?: number;
  /**
   * Motion blur angle (in degrees).
   */
  motionAngle?: number;
  center: Point3;
  /**
   * For background blur.
   */
  saturation: number;
}
/**
 * Defines a shadow style
 */
export interface Shadow {
  class: "shadow";
  isEnabled: boolean;
  color: Color1;
  /**
   * Horizontal offset of the shadow.
   */
  offsetX: number;
  /**
   * Vertical offset of the shadow.
   */
  offsetY: number;
  /**
   * Blur value of the shadow.
   */
  blur: number;
  /**
   * Spread amount of the shadow contour.
   */
  spread: number;
  contextSettings: GraphicsContextSettings1;
  /**
   * True means inner shadows. False means shadows.
   */
  inner: boolean;
}
/**
 * Defines a RGBA color value.
 */
export interface Color1 {
  class: "color";
  alpha: UnitInterval;
  red: UnitInterval;
  green: UnitInterval;
  blue: UnitInterval;
}
/**
 * Defines color adjust styles on images
 */
export interface ColorControls {
  class: "colorControls";
  isEnabled: boolean;
  brightness: number;
  contrast: number;
  hue: number;
  saturation: number;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect1 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Describes the properties of the alpha mask.
 */
export interface AlphaMask {
  class: "alphaMask";
  /**
   * The value is ID of a object that is a alpha mask of this object.
   */
  id: string;
  alphaType: 0 | 1 | 2;
  /**
   * Crops the masked object to the boundaries of the masking object.
   */
  crop: boolean;
}
/**
 * Layers provide a way to manage all the items that make up your artwork.
 */
export interface Layer {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings2;
  style: Style1;
  bounds: Rect2;
  frame: Rect3;
  matrix: Matrix5;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  /**
   * Describes all child object information. The child item that appears later will be above the child item that appears first.
   */
  childObjects: (Path | Image | Text | Group | SymbolInstanceLayer)[];
  class: "layer";
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings2 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style1 {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect2 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect3 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Path represents a vector geometry which is formed by individual subpaths combined together via boolean operations.
 */
export interface Path {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings3;
  style: Style2;
  bounds: Rect4;
  frame: Rect5;
  matrix: Matrix6;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  class: "path";
  shape: Shape;
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings3 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style2 {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect4 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect5 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Specifies shape of the path.
 */
export interface Shape {
  class: "shape";
  /**
   * An array of subshape in the shape.
   */
  subshapes: Subshape[];
  /**
   * The value describes the shape's 'winding rule' (policy determining how overlapping contours fill an area).
   */
  windingRule: 0 | 1;
}
/**
 * A single subshape descriptor.
 */
export interface Subshape {
  class: "subshape";
  /**
   * The contour of the subpath is described.
   */
  subGeometry: Contour | Text | Image | SymbolInstanceLayer | Path | Group;
  /**
   * Boolean operation combining this and next-in-the-array path.
   */
  booleanOperation: 0 | 1 | 2 | 3 | 4;
}
/**
 * Describes the contour of a shape.
 */
export interface Contour {
  class: "contour";
  /**
   * Describes if the path is opened or closed.
   */
  closed: boolean;
  points: PointAttr[];
}
/**
 * A single point descriptor.
 */
export interface PointAttr {
  class: "pointAttr";
  /**
   * Corner radius at the point.
   */
  radius?: number;
  /**
   * Enumeration of the corner styles that can be applied to vector points.
   */
  cornerStyle?: 0 | 1 | 2 | 3;
  curveFrom?: Point4;
  curveTo?: Point5;
  point: Point6;
}
/**
 * Contains the information needed to draw the text.
 */
export interface Text {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings4;
  style: Style3;
  bounds: Rect6;
  frame: Rect7;
  matrix: Matrix7;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  class: "text";
  /**
   * Text content of the text object. The encoding format is utf-8.
   */
  content: string;
  textOnPath?: TextOnPath;
  /**
   * Specifies the text frame semantics. fixed mode strictly sets the typeset area according to the frame. auto width and auto height mode expands associated bounds as needed.
   */
  frameMode: 0 | 1 | 2;
  /**
   * Text vertical alignment.
   */
  verticalAlignment: 0 | 1 | 2;
  /**
   * An array containing font style ranges. Note: Arrays are ordered.
   */
  attr: TextAttr[];
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings4 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style3 {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect6 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect7 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * If this item exists, the text is on the path.
 */
export interface TextOnPath {
  class: "textOnPath";
}
/**
 * Text Attr defined for particular fragments of the text (text ranges).
 */
export interface TextAttr {
  class: "fontAttr";
  /**
   * The number of characters(utf-8) that the current attribute acts on.
   */
  length: number;
  fillColor?: Color2;
  borderColor?: Color3;
  /**
   * Describes the stroke width.Exists only when stroke is required.
   */
  borderSize?: number;
  contextSettings: GraphicsContextSettings1;
  /**
   * Horizontal alignment of the text.
   */
  horizontalAlignment: 0 | 1 | 2 | 3 | 4;
  /**
   * Common name of font. The font name may contain subfamily, in which case the subFamilyName will not appear. If this item does not exist, the font name cannot be obtained.
   */
  name?: string;
  /**
   * Font type (called 'subfamily' in OpenType specification).
   */
  subFamilyName?: string;
  /**
   * Font's size.
   */
  size: number;
  /**
   * Describes if kerning feature is enabled in the text.
   */
  kerning: boolean;
  /**
   * Text letter spacing (can be negative).
   */
  letterSpacing: number;
  /**
   * Describes the line spacing values of the text.
   */
  lineSpace: number;
  /**
   * Text underline type.
   */
  underline: 0 | 1 | 2;
  /**
   * Describes if the text has line through.
   */
  linethrough: boolean;
  /**
   * Describes if the text is bold. If missing the information is not known.
   */
  bold?: boolean;
  /**
   * Describes if the text is italic. If missing the information is not known.
   */
  italic?: boolean;
  lettertransform: 0 | 1 | 2 | 3;
  /**
   * Describes baselineShift value.
   */
  baselineShift: number;
  /**
   * Describes baseline's position type.
   */
  baseline: 0 | 1 | 2;
  /**
   * Describes the horizontal scaling value of text.
   * Value example:
   *   1:    not scale
   *   1.75: 175%
   *   2:    200%
   *   0.5:  50%
   *
   */
  horizontalScale: number;
  /**
   * Describes the vertical scaling value of text. Value example reference horizontalScale.
   */
  verticalScale: number;
  /**
   * Describes the proportional spacing of text.
   * Value example:
   *   1:    100%
   *   0.5:  50%
   *   0:    0%
   *
   */
  proportionalSpacing: number;
  /**
   * Describes the value of text rotation(in degree).
   */
  rotate: number;
  textParagraph: TextParagraph;
}
/**
 * Defines a RGBA color value.
 */
export interface Color2 {
  class: "color";
  alpha: UnitInterval;
  red: UnitInterval;
  green: UnitInterval;
  blue: UnitInterval;
}
/**
 * Defines a RGBA color value.
 */
export interface Color3 {
  class: "color";
  alpha: UnitInterval;
  red: UnitInterval;
  green: UnitInterval;
  blue: UnitInterval;
}
/**
 * Describes the paragraph properties of the text.
 */
export interface TextParagraph {
  class: "textParagraph";
  paragraphSpacing: number;
}
/**
 * Contains the information needed to draw the image.
 */
export interface Image {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings5;
  style: Style4;
  bounds: Rect8;
  frame: Rect9;
  matrix: Matrix8;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  class: "image";
  /**
   * The relative path to the image file (utf-8).
   */
  imageFileName: string;
  /**
   * If the value is true, only fill is used. Otherwise, the content of the image and the fill effect are used simultaneously. If missing, equivalent to false.
   */
  fillReplacesImage?: boolean;
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings5 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style4 {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect8 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect9 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Symbol instance object represent an instance of a symbol source.
 */
export interface SymbolInstanceLayer {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings6;
  style: Style5;
  bounds: Rect10;
  frame: Rect11;
  matrix: Matrix9;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  class: "symbolInstance";
  overrideValues: OverrideValue[];
  /**
   * This field refers to the value symbolID in the symbol master.
   */
  symbolID: string;
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings6 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style5 {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect10 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect11 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Defines an individual symbol override.
 */
export interface OverrideValue {
  class: "overrideValue";
  overrideName: OverrideName;
  value: string | FileReference | DataReference;
}
/**
 * Defines a reference to a file within the document bundle.
 */
export interface FileReference {
  class: "MSJSONFileReference";
  _ref_class: "MSImageData" | "MSImmutablePage" | "MSPatch";
  _ref: string;
}
/**
 * Defines inline base64 data.
 */
export interface DataReference {
  class: "MSJSONOriginalDataReference";
  _ref_class: "MSImageData" | "MSFontData";
  _ref: string;
  data: {
    _data: string;
  };
  sha1: {
    _data: string;
  };
}
/**
 * A group is a combination of a series of objects.
 */
export interface Group {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings7;
  style: Style6;
  bounds: Rect12;
  frame: Rect13;
  matrix: Matrix10;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  /**
   * Describes all child object information. The child item that appears later will be above the child item that appears first.
   */
  childObjects: (Path | Image | Text | Group | SymbolInstanceLayer)[];
  class: "group";
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings7 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style6 {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect12 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect13 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Contains objects to define a global pattern.
 */
export interface PatternLayerDef {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings8;
  style: Style7;
  bounds: Rect14;
  frame: Rect15;
  matrix: Matrix11;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  /**
   * Describes all child object information. The child item that appears later will be above the child item that appears first.
   */
  childObjects: (Path | Image | Text | Group | SymbolInstanceLayer)[];
  class: "pattern_layer_def";
  /**
   * @minItems 4
   * @maxItems 4
   */
  pattern_bounding_box: [number, number, number, number];
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings8 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style7 {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect14 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect15 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * A symbol source object represents a reusable group of objects.
 */
export interface SymbolMaster {
  /**
   * Unique object identifier.
   * ID format:
   *   Photoshop: numeric
   *   Sketch: UUID string
   *   Adobe XD: UUID string
   *   Figma: string like 3:5:3
   *   In Illustrator: numeric
   *
   */
  id: string;
  /**
   * Name of object (utf-8).
   */
  name?: string;
  /**
   * Describes whether the object is locked.
   */
  isLocked: boolean;
  /**
   * Describes the visibility of the object.
   */
  visible: boolean;
  contextSettings: GraphicsContextSettings9;
  style: Style8;
  bounds: Rect16;
  frame: Rect17;
  matrix: Matrix12;
  alphaMaskBy: AlphaMask[];
  /**
   * The result of the outline mask area is the intersection of multiple outline mask object results.
   */
  outlineMaskBy: string[];
  /**
   * Describes the mask type of the object.
   */
  maskType: 0 | 1 | 2;
  /**
   * Describes all child object information. The child item that appears later will be above the child item that appears first.
   */
  childObjects: (Path | Image | Text | Group | SymbolInstanceLayer)[];
  class: "symbolMaster";
  /**
   * A flag indicating whether backgroundColor should be applied as a background color of the object.
   */
  hasBackgroundColor: boolean;
  backgroundColor: Color;
  includeBackgroundColorInInstance: boolean;
  allowsOverrides: boolean;
  overrideProperties: OverrideProperty[];
  /**
   * The symbolID field in the symbol instance refers to the value of this field.
   */
  symbolID: string;
}
/**
 * Defines the opacity and blend mode and isolate blending and transparency knockout group of a object.
 */
export interface GraphicsContextSettings9 {
  class: "graphicsContextSettings";
  blendMode: BlendMode;
  opacity: UnitInterval;
  /**
   * You can isolate the blending mode to a targeted layer or group in order to leave objects beneath unaffected.
   */
  isolateBlending: boolean;
  /**
   * In a transparency knockout group, the elements of a group don't show through each other.
   */
  transparencyKnockoutGroup: 0 | 1 | 2;
}
/**
 * Object styles descriptor.
 */
export interface Style8 {
  class: "style";
  /**
   * An array containing the border styles of the object.
   */
  borders: Border[];
  /**
   * An array containing the fill effects of the object.
   */
  fills: Fill[];
  /**
   * An array containing the blur effects of the object.
   */
  blurs: Blur[];
  /**
   * An array containing the shadow effects of the object.
   */
  shadows: Shadow[];
  colorControls?: ColorControls;
}
/**
 * This property records the bounds information of the object before it is matrixed. self.bound * self.matrix = self.frame. self.frame * parent.matrix = self in parent coordinate system frame. and so on.
 */
export interface Rect16 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Frame information for the object. When the object is a group, its frame is the union of all objects in the group, whether or not the group contains a mask. This property stores information about the object after the matrix transformation.
 */
export interface Rect17 {
  class: "rect";
  /**
   * Whether to keep the height and width ratio constant while scaling.
   */
  constrainProportions: boolean;
  height: number;
  width: number;
  /**
   * Top left X coordinate. The X value in the top left corner is 0. The X-axis increases to the right.
   */
  x: number;
  /**
   * Top left Y coordinate. The Y value in the top left corner is 0. The Y-axis increases to the up.
   */
  y: number;
}
/**
 * Defines override properties on symbol sources.
 */
export interface OverrideProperty {
  class: "MSImmutableOverrideProperty";
  overrideName: OverrideName;
  canOverride: boolean;
}
